#! usr/bin/env python
from sys import argv
import re
script, filename = argv

# A script used to parse posterior probability of ancestral states
# The input is part of rst file generated by PAML codeml module
# Qinwen Liu(qinwen@uchicago.edu), March 17, 2013

def ParseStates(list):
    """"
    separate the residue and its posterior probability
    and return them as a nested list
    """
    pp_Anc = [] 
    for i in range(20):
        test = re.match(r'(\w)\((\d\.\d{3})\)', list[i])
        pp_Anc = pp_Anc + [[test.group(1), float(test.group(2))]]
    return pp_Anc    

def Top3_pp(output, ppAnc):
    """
    grab top 3 most likely residues and write them to the output file
    """
    for n in range(3):
        max = 0.0
        maxState = ''
        maxI = 0
        for i in range(20):
            if ppAnc[i][1] > max:
                max = ppAnc[i][1]
                maxState = ppAnc[i][0]
                maxI = i
        if maxState != '':
            output.write(maxState + ' ' + str(max) + ' ')
            ppAnc[maxI][1] = 0.0

def Main(filename):
    input = open(filename, 'r')
    output = open('Node_.dat', 'a+w')
    for line in input:
        """
        split each row of the posterior probability block
        and extract column 4 to 23 (containing p.p. of residues)
        """
        column = line.split()
        output.write(column[0] + ' ')
        list = re.findall(r'\w\(\d\.\d{3}\)', line)
        #for i in range(3, 22):
            #print column[i]
            #list = list.append(column[i])
        ppAnc = ParseStates(list)
        Top3_pp(output, ppAnc)
        output.write('\n')

Main(filename)